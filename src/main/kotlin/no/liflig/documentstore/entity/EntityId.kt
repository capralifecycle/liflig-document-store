package no.liflig.documentstore.entity

import java.util.UUID
import no.liflig.documentstore.repository.RepositoryJdbi

/** EntityId represents the ID pointing to a specific [Entity]. */
sealed interface EntityId

/** UUID version of an [EntityId], for `uuid` columns. */
interface UuidEntityId : EntityId {
  val value: UUID
}

/** String version of an [EntityId], for `text` columns. */
interface StringEntityId : EntityId {
  val value: String
}

/**
 * Integer version of an [EntityId], for `bigint` columns.
 *
 * If using [RepositoryJdbi.idsGeneratedByDatabase], the `id` column can be:
 * ```sql
 * id bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
 * ```
 */
interface IntegerEntityId : EntityId {
  val value: Long

  companion object {
    /**
     * Temporary value to use when creating entities that have their IDs generated by the database
     * (see [RepositoryJdbi.idsGeneratedByDatabase]).
     */
    const val GENERATED: Long = -1
  }
}

/**
 * In order to use JDBI's `bindArray` method to bind list arguments, we have to supply the list's
 * element type at runtime. We use this in `RepositoryJdbi.listByIds`. However, we don't have the
 * runtime type of `EntityId` there, and we cannot use `reified` on class type parameters. Thus, we
 * use this function to get the runtime type of the `EntityId`, so we can bind it correctly.
 */
internal fun getEntityIdType(entityId: EntityId): Class<out EntityId> {
  return when (entityId) {
    is UuidEntityId -> UuidEntityId::class.java
    is StringEntityId -> StringEntityId::class.java
    is IntegerEntityId -> IntegerEntityId::class.java
  }
}
