package no.liflig.documentstore.entity

import java.util.UUID
import no.liflig.documentstore.entity.IntegerEntityId.Companion.GENERATED
import no.liflig.documentstore.repository.RepositoryWithGeneratedIds

/** EntityId represents the ID pointing to a specific [Entity]. */
sealed interface EntityId

/** UUID version of an [EntityId], for `uuid` columns. */
interface UuidEntityId : EntityId {
  val value: UUID
}

/** String version of an [EntityId], for `text` columns. */
interface StringEntityId : EntityId {
  val value: String
}

/**
 * Integer version of an [EntityId], for `bigint` columns.
 *
 * If using [RepositoryWithGeneratedIds], the `id` column can be:
 * ```sql
 * id bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY
 * ```
 *
 * See [GENERATED].
 */
interface IntegerEntityId : EntityId {
  val value: Long

  companion object {
    /**
     * Temporary value to use when creating entities that have their IDs generated by the database
     * (see [RepositoryWithGeneratedIds]).
     *
     * Example:
     * ```
     * // Here, the entity passed to create will have the GENERATED temporary ID
     * // But the entity returned by create will have the real ID generated by the database
     * val entity = exampleRepository.create(
     *     ExampleEntity(
     *         id = ExampleId(IntegerEntityId.GENERATED),
     *         name = "Test",
     *     ),
     * )
     * ```
     */
    const val GENERATED: Long = -1
  }
}

/**
 * In order to use JDBI's `bindArray` method to bind list arguments, we have to supply the list's
 * element type at runtime. We use this in `RepositoryJdbi.listByIds`. However, we don't have the
 * runtime type of `EntityId` there, and we cannot use `reified` on class type parameters. Thus, we
 * use this function to get the runtime type of the `EntityId`, so we can bind it correctly.
 */
internal fun getEntityIdType(id: EntityId): Class<out EntityId> {
  return when (id) {
    is UuidEntityId -> UuidEntityId::class.java
    is StringEntityId -> StringEntityId::class.java
    is IntegerEntityId -> IntegerEntityId::class.java
  }
}

internal fun entityIdValueToString(id: EntityId): String {
  return when (id) {
    is UuidEntityId -> id.value.toString()
    is StringEntityId -> id.value
    is IntegerEntityId -> id.value.toString()
  }
}
